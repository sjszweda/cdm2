AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template to create the aws resources needed for Snowflake integration

Parameters:
  sfStorageAWSIAMUserARN:
    Type: String
    Description: "STORAGE_AWS_IAM_USER_ARN from Snowflake"
    Default: "arn:aws:iam::407453656878:user/wdvj-s-iest4729"

  sfStorageAWSExternalID:
    Type: String
    Description: "STORAGE_AWS_EXTERNAL_ID from Snowflake (leave as '000' if Snowflake objects do not exist yet)"
    Default: "000"

  sfSQLChannel:
    Type: String
    Description: "ARN of the SQS channel from Snowflake (leave blank if Snowflake objects do not exist yet)"
    Default: ""


Conditions:
  HasEventNotifications: !Not [!Equals [!Ref sfSQLChannel, '']]


Resources:
  #S3 bucket that Snowflake will load files from and output to
  cdm2S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: 'cdm2'
      #block public access
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Suspended
      #add server side encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
            BucketKeyEnabled: true
      #add a notification to the recon key to notify snowflake when a file is uploaded
      NotificationConfiguration:
          Fn::If:
          - HasEventNotifications
          - QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: 'recon/'
              Queue: !Ref sfSQLChannel
          - Ref: AWS::NoValue

  #add a policy to the bucket that only allows ssl connections
  s3sslonlyaccess:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref cdm2S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: arn:aws:s3:::cdm2
            Principal: '*'
            Condition:
              StringLike:
                "aws:SecureTransport": "false"

  #create a role for snowflake to intergrate with s3
  snowflakeS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS: !Ref sfStorageAWSIAMUserARN
            Action:
              - "sts:AssumeRole"
            Condition:  {"StringEquals": {"sts:ExternalId": [!Ref sfStorageAWSExternalID]}}
      Description: Cross Account S3 Access for Snowflake
      Path: /
      RoleName: snowflake-s3integration

  #create a policy that allows access to the cdm2S3Bucket and attach it to the snowflakeS3Role
  snowflakeS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: cdm2-snowflake-s3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:DeleteObject
              - s3:DeleteObjectVersion
            Resource: arn:aws:s3:::cdm2/*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: arn:aws:s3:::cdm2
      Roles:
        - !Ref snowflakeS3Role
